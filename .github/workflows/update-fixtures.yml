name: Update Niconico Fixtures

on:
  # Daily execution at 00:00 UTC
  schedule:
    - cron: '0 0 * * *'

  # Manual execution
  workflow_dispatch:
    inputs:
      force_issue_creation:
        description: 'Force issue creation even without changes (for testing)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  PYTHON_VERSION: "3.12"

permissions:
  contents: write  # Allow git push
  issues: write    # Allow creating issues

jobs:
  update-fixtures:
    name: Update Niconico Fixtures
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-
            ${{ runner.os }}-python-

      - name: Install dependencies
        run: |
          rm -rf .venv
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          # Install this package with dev dependencies
          pip install -e ".[dev]"
          # Clone and install Music Assistant from your fork and branch
          git clone --depth 1 --branch add-niconico-provider https://github.com/Shi-553/server.git /tmp/music-assistant-server
          pip install -e /tmp/music-assistant-server

      - name: Update Niconico fixtures
        env:
          NICONICO_SESSION: ${{ secrets.NICONICO_SESSION }}
        run: |
          source .venv/bin/activate
          export PYTHONPATH="${PYTHONPATH}:$(pwd)"
          python scripts/main.py 2>&1 | tee fixture-update.log

      - name: Check for fixture changes
        id: check_changes
        run: |
          if [ ! -d "fixtures" ]; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No fixtures directory found"
          else
            # Add all files to staging to detect new files
            git add fixtures/ fixture_types.py __init__.py 2>/dev/null || true
            if git diff --cached --quiet; then
              echo "changes=false" >> $GITHUB_OUTPUT
              echo "No fixture changes detected"
            else
              echo "changes=true" >> $GITHUB_OUTPUT
              echo "Fixture changes detected"
              git diff --cached --name-only > changed-files.txt
              git diff --cached --stat > diff-stat.txt
              echo "file_count=$(git diff --cached --name-only | wc -l)" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Commit and push changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -m "Update fixtures: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          git push
      - name: Create issue for fixture updates
        if: steps.check_changes.outputs.changes == 'true' || github.event.inputs.force_issue_creation == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const date = new Date().toISOString().split('T')[0];
            const fileCount = '${{ steps.check_changes.outputs.file_count }}' || '0';
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            // Read files safely (they may not exist if no changes)
            let changedFiles = 'No changes detected';
            let diffStat = 'No changes detected';

            if (fs.existsSync('changed-files.txt')) {
              changedFiles = fs.readFileSync('changed-files.txt', 'utf8').trim();
            }
            if (fs.existsSync('diff-stat.txt')) {
              diffStat = fs.readFileSync('diff-stat.txt', 'utf8').trim();
            }

            const updateLog = fs.readFileSync('fixture-update.log', 'utf8');

            // Truncate log if too long (GitHub issue body limit is ~65536 chars)
            const maxLogLength = 50000;
            const truncatedLog = updateLog.length > maxLogLength
              ? updateLog.substring(0, maxLogLength) + '\n\n... (truncated, see artifact for full log)'
              : updateLog;

            const issueBody = `## Fixture Update Summary

            **Date:** ${date}
            **Changed Files:** ${fileCount}
            **Workflow Run:** [View Details](${runUrl})

            ### Changed Files
            \`\`\`
            ${changedFiles}
            \`\`\`

            ### Diff Summary
            \`\`\`
            ${diffStat}
            \`\`\`

            ### Update Log
            <details>
            <summary>Click to expand log (${updateLog.length} bytes)</summary>

            \`\`\`
            ${truncatedLog}
            \`\`\`
            </details>

            ### Next Steps

            The fixtures have been automatically updated and committed to this repository.

            **Before applying to Music Assistant server:**

            1. Review the changes in the [latest commit](https://github.com/${context.repo.owner}/${context.repo.repo}/commits/main)
            2. **Verify locally** - Copy updated fixtures and run tests:
               \`\`\`bash
               # Clone this repository if not already done
               git clone https://github.com/${context.repo.owner}/${context.repo.repo}.git
               cd ${context.repo.repo}
               git pull

               # Copy fixtures to Music Assistant server repository
               cp -r fixtures/* /path/to/music-assistant/server/tests/providers/nicovideo/fixtures/

               # Run tests in the server repository
               cd /path/to/music-assistant/server
               pytest tests/providers/nicovideo/ -v
               \`\`\`
            3. If all tests pass, create a PR in the server repository with the updated fixtures
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[Automated] Fixture Update - ${date}`,
              body: issueBody,
              labels: ['automated', 'fixture-update']
            });
